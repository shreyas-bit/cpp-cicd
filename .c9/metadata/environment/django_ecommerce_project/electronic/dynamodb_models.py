{"filter":false,"title":"dynamodb_models.py","tooltip":"/django_ecommerce_project/electronic/dynamodb_models.py","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":52,"column":18},"end":{"row":52,"column":19},"action":"insert","lines":[" "],"id":597},{"start":{"row":52,"column":19},"end":{"row":52,"column":20},"action":"insert","lines":[" "]}],[{"start":{"row":53,"column":18},"end":{"row":53,"column":19},"action":"insert","lines":[" "],"id":598},{"start":{"row":53,"column":19},"end":{"row":53,"column":20},"action":"insert","lines":[" "]}],[{"start":{"row":53,"column":5},"end":{"row":53,"column":6},"action":"remove","lines":[" "],"id":599}],[{"start":{"row":53,"column":5},"end":{"row":53,"column":6},"action":"insert","lines":[" "],"id":600}],[{"start":{"row":49,"column":4},"end":{"row":49,"column":5},"action":"remove","lines":["#"],"id":601}],[{"start":{"row":49,"column":4},"end":{"row":49,"column":5},"action":"insert","lines":[" "],"id":602}],[{"start":{"row":50,"column":4},"end":{"row":50,"column":5},"action":"remove","lines":["#"],"id":603}],[{"start":{"row":50,"column":4},"end":{"row":50,"column":5},"action":"insert","lines":[" "],"id":604}],[{"start":{"row":51,"column":4},"end":{"row":51,"column":5},"action":"remove","lines":["#"],"id":605}],[{"start":{"row":51,"column":4},"end":{"row":51,"column":5},"action":"insert","lines":[" "],"id":606}],[{"start":{"row":52,"column":4},"end":{"row":52,"column":5},"action":"remove","lines":["#"],"id":607}],[{"start":{"row":52,"column":4},"end":{"row":52,"column":5},"action":"insert","lines":[" "],"id":608}],[{"start":{"row":53,"column":4},"end":{"row":53,"column":5},"action":"remove","lines":["#"],"id":609}],[{"start":{"row":53,"column":4},"end":{"row":53,"column":5},"action":"insert","lines":[" "],"id":610}],[{"start":{"row":56,"column":17},"end":{"row":57,"column":0},"action":"insert","lines":["",""],"id":611},{"start":{"row":57,"column":0},"end":{"row":57,"column":16},"action":"insert","lines":["                "]},{"start":{"row":57,"column":16},"end":{"row":57,"column":17},"action":"insert","lines":["p"]},{"start":{"row":57,"column":17},"end":{"row":57,"column":18},"action":"insert","lines":["r"]},{"start":{"row":57,"column":18},"end":{"row":57,"column":19},"action":"insert","lines":["i"]},{"start":{"row":57,"column":19},"end":{"row":57,"column":20},"action":"insert","lines":["n"]}],[{"start":{"row":57,"column":16},"end":{"row":57,"column":20},"action":"remove","lines":["prin"],"id":612},{"start":{"row":57,"column":16},"end":{"row":57,"column":23},"action":"insert","lines":["print()"]}],[{"start":{"row":57,"column":22},"end":{"row":57,"column":60},"action":"insert","lines":["f\"Order saved to DynamoDB: {response}\""],"id":613}],[{"start":{"row":57,"column":61},"end":{"row":58,"column":0},"action":"insert","lines":["",""],"id":614},{"start":{"row":58,"column":0},"end":{"row":58,"column":16},"action":"insert","lines":["                "]}],[{"start":{"row":58,"column":12},"end":{"row":58,"column":16},"action":"remove","lines":["    "],"id":615},{"start":{"row":58,"column":8},"end":{"row":58,"column":12},"action":"remove","lines":["    "]}],[{"start":{"row":58,"column":8},"end":{"row":58,"column":9},"action":"insert","lines":["e"],"id":616},{"start":{"row":58,"column":9},"end":{"row":58,"column":10},"action":"insert","lines":["c"]}],[{"start":{"row":58,"column":9},"end":{"row":58,"column":10},"action":"remove","lines":["c"],"id":617}],[{"start":{"row":58,"column":9},"end":{"row":58,"column":10},"action":"insert","lines":["x"],"id":618},{"start":{"row":58,"column":10},"end":{"row":58,"column":11},"action":"insert","lines":["c"]},{"start":{"row":58,"column":11},"end":{"row":58,"column":12},"action":"insert","lines":["e"]}],[{"start":{"row":58,"column":8},"end":{"row":58,"column":12},"action":"remove","lines":["exce"],"id":619},{"start":{"row":58,"column":8},"end":{"row":58,"column":14},"action":"insert","lines":["except"]}],[{"start":{"row":55,"column":15},"end":{"row":55,"column":16},"action":"insert","lines":[" "],"id":620},{"start":{"row":55,"column":16},"end":{"row":55,"column":17},"action":"insert","lines":[" "]}],[{"start":{"row":57,"column":12},"end":{"row":57,"column":16},"action":"remove","lines":["    "],"id":621}],[{"start":{"row":58,"column":14},"end":{"row":58,"column":15},"action":"insert","lines":[" "],"id":622},{"start":{"row":58,"column":15},"end":{"row":58,"column":16},"action":"insert","lines":["E"]},{"start":{"row":58,"column":16},"end":{"row":58,"column":17},"action":"insert","lines":["x"]},{"start":{"row":58,"column":17},"end":{"row":58,"column":18},"action":"insert","lines":["c"]}],[{"start":{"row":58,"column":15},"end":{"row":58,"column":18},"action":"remove","lines":["Exc"],"id":623},{"start":{"row":58,"column":15},"end":{"row":58,"column":24},"action":"insert","lines":["Exception"]}],[{"start":{"row":58,"column":24},"end":{"row":58,"column":25},"action":"insert","lines":[" "],"id":624},{"start":{"row":58,"column":25},"end":{"row":58,"column":26},"action":"insert","lines":["a"]},{"start":{"row":58,"column":26},"end":{"row":58,"column":27},"action":"insert","lines":["s"]}],[{"start":{"row":58,"column":27},"end":{"row":58,"column":28},"action":"insert","lines":[" "],"id":625},{"start":{"row":58,"column":28},"end":{"row":58,"column":29},"action":"insert","lines":["e"]},{"start":{"row":58,"column":29},"end":{"row":58,"column":30},"action":"insert","lines":[":"]}],[{"start":{"row":58,"column":30},"end":{"row":59,"column":0},"action":"insert","lines":["",""],"id":626},{"start":{"row":59,"column":0},"end":{"row":59,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":59,"column":12},"end":{"row":59,"column":14},"action":"insert","lines":["[]"],"id":627}],[{"start":{"row":59,"column":12},"end":{"row":59,"column":14},"action":"remove","lines":["[]"],"id":628}],[{"start":{"row":59,"column":12},"end":{"row":59,"column":13},"action":"insert","lines":["p"],"id":629},{"start":{"row":59,"column":13},"end":{"row":59,"column":14},"action":"insert","lines":["r"]},{"start":{"row":59,"column":14},"end":{"row":59,"column":15},"action":"insert","lines":["i"]},{"start":{"row":59,"column":15},"end":{"row":59,"column":16},"action":"insert","lines":["n"]},{"start":{"row":59,"column":16},"end":{"row":59,"column":17},"action":"insert","lines":["t"]}],[{"start":{"row":59,"column":17},"end":{"row":59,"column":19},"action":"insert","lines":["()"],"id":630}],[{"start":{"row":59,"column":18},"end":{"row":59,"column":51},"action":"insert","lines":["f\"Error saving to DynamoDB: {e}\")"],"id":631}],[{"start":{"row":59,"column":51},"end":{"row":59,"column":52},"action":"remove","lines":[")"],"id":632}],[{"start":{"row":42,"column":0},"end":{"row":42,"column":16},"action":"remove","lines":["    import boto3"],"id":633},{"start":{"row":41,"column":23},"end":{"row":42,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":62,"column":4},"end":{"row":76,"column":49},"action":"remove","lines":["# def save_order_to_dynamodb(order):","    # try:","    #     response = table.put_item(","    #         Item={","    #             'order_id': str(order.id),  # Ensure this matches the partition key in DynamoDB","    #             'user': str(order.user.id),","    #             'product_name': order.product_name,","    #             'quantity': order.quantity,","    #             'total_price': str(order.total_price),  # Convert decimals to string","    #             'order_date': str(order.order_date),","    #         }","    #     )","    #     print(f\"Order saved to DynamoDB: {response}\")","    # except Exception as e:","    #     print(f\"Error saving to DynamoDB: {e}\")"],"id":634}],[{"start":{"row":61,"column":0},"end":{"row":61,"column":4},"action":"remove","lines":["    "],"id":635},{"start":{"row":60,"column":4},"end":{"row":61,"column":0},"action":"remove","lines":["",""]},{"start":{"row":60,"column":0},"end":{"row":60,"column":4},"action":"remove","lines":["    "]},{"start":{"row":59,"column":4},"end":{"row":60,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":43,"column":4},"end":{"row":60,"column":4},"action":"remove","lines":["def save_order_to_dynamodb(order):","        try:","            response = table.put_item(","                Item= {","                    'order_id': str(order.id),  # Ensure this matches the partition key in DynamoDB","                    'user': str(order.user.id),","                    'product_name': order.product_name,","                    'quantity': order.quantity,","                    'total_price': str(order.total_price),  # Convert decimals to string","                    'order_date': str(order.order_date),","                   ","                  }","                )","            print(f\"Order saved to DynamoDB: {response}\")","        except Exception as e:","            print(f\"Error saving to DynamoDB: {e}\")","    ","    "],"id":636}],[{"start":{"row":7,"column":0},"end":{"row":12,"column":91},"action":"remove","lines":["class DynamoOrder:","    def __init__(self, product_id):","        self.product_id = product_id","        # Initialize DynamoDB resource","        self.dynamodb = boto3.resource('dynamodb', region_name='us-east-1')","        self.table = self.dynamodb.Table('orders')  # Ensure you use the correct table name"],"id":637},{"start":{"row":7,"column":0},"end":{"row":18,"column":47},"action":"insert","lines":["class DynamoOrder:","    def __init__(self, order):","        \"\"\"","        Initialize DynamoOrder with attributes from the Django Order model.","        \"\"\"","        # Assuming that 'product_id' is your partition key in DynamoDB","        self.product_id = str(order.id)  # Use the order's id or any unique identifier","        self.user = str(order.user.id)  # Assuming `user` is a ForeignKey to User","        self.product_name = order.product_name  # Replace with the actual field name in your model","        self.quantity = order.quantity","        self.total_price = str(order.total_price)  # Convert decimal to string for DynamoDB","        self.order_date = str(order.order_date)"]}],[{"start":{"row":20,"column":4},"end":{"row":34,"column":23},"action":"remove","lines":["def save(self):","        # DynamoDB resource setup","        dynamodb = boto3.resource('dynamodb', region_name='us-east-1')","        table = dynamodb.Table('orders')  # DynamoDB table for orders","","        # Save the order to DynamoDB","        response = table.put_item(","            Item={","                'product_id': str(self.product_id),  # Partition key (id)","                'user': str(self.user.id),            # User ID (as string)","                'total_price': str(self.total_price), # Total price (convert decimal to string)","                'order_date': str(self.order_date),   # Order date (convert datetime to string)","            }","        )","        return response"],"id":638},{"start":{"row":20,"column":4},"end":{"row":39,"column":23},"action":"insert","lines":["","    def save(self):","        \"\"\"","        Save the order to DynamoDB.","        \"\"\"","        dynamodb = boto3.resource('dynamodb', region_name='us-east-1')","        table = dynamodb.Table('orders')  # Your DynamoDB table name","","        # Use product_id as the partition key","        response = table.put_item(","            Item={","                'product_id': self.product_id,  # This is your partition key","                'user': self.user,","                'product_name': self.product_name,","                'quantity': self.quantity,","                'total_price': self.total_price,","                'order_date': self.order_date","            }","        )","        return response"]}],[{"start":{"row":41,"column":4},"end":{"row":52,"column":23},"action":"remove","lines":["def get_order(self):","        \"\"\"","        Fetch the order details from DynamoDB using the product_id (partition key).","        \"\"\"","        try:","            response = self.table.get_item(","                Key={'product_id': str(self.product_id)}  # Assuming 'product_id' is the partition key","            )","            return response.get('Item', None)  # If not found, return None","        except Exception as e:","            print(f\"Error fetching order from DynamoDB: {e}\")","            return None"],"id":639},{"start":{"row":41,"column":4},"end":{"row":53,"column":23},"action":"insert","lines":[" def get_order(self):","        \"\"\"","        Fetch the order details from DynamoDB using the product_id (partition key).","        \"\"\"","        try:","            # Fetch order from DynamoDB using product_id as the partition key","            response = self.table.get_item(","                Key={'product_id': self.product_id}","            )","            return response.get('Item', None)  # If not found, return None","        except Exception as e:","            print(f\"Error fetching order from DynamoDB: {e}\")","            return None"]}],[{"start":{"row":41,"column":4},"end":{"row":41,"column":5},"action":"remove","lines":[" "],"id":640}],[{"start":{"row":7,"column":0},"end":{"row":19,"column":0},"action":"remove","lines":["class DynamoOrder:","    def __init__(self, order):","        \"\"\"","        Initialize DynamoOrder with attributes from the Django Order model.","        \"\"\"","        # Assuming that 'product_id' is your partition key in DynamoDB","        self.product_id = str(order.id)  # Use the order's id or any unique identifier","        self.user = str(order.user.id)  # Assuming `user` is a ForeignKey to User","        self.product_name = order.product_name  # Replace with the actual field name in your model","        self.quantity = order.quantity","        self.total_price = str(order.total_price)  # Convert decimal to string for DynamoDB","        self.order_date = str(order.order_date)",""],"id":641},{"start":{"row":7,"column":0},"end":{"row":21,"column":0},"action":"insert","lines":["class DynamoOrder:","    def __init__(self, order):","        \"\"\"","        Initialize DynamoOrder with attributes from the Django Order model.","        \"\"\"","        # Initialize DynamoDB resource and table","        self.dynamodb = boto3.resource('dynamodb', region_name='us-east-1')","        self.table = self.dynamodb.Table('orders')  # DynamoDB table name","        self.product_id = str(order.id)  # Use the order's id or any unique identifier","        self.user = str(order.user.id)  # Assuming `user` is a ForeignKey to User","        self.product_name = order.product_name  # Replace with actual field names","        self.quantity = order.quantity","        self.total_price = str(order.total_price)  # Convert decimal to string for DynamoDB","        self.order_date = str(order.order_date)",""]}],[{"start":{"row":23,"column":4},"end":{"row":42,"column":4},"action":"remove","lines":["def save(self):","        \"\"\"","        Save the order to DynamoDB.","        \"\"\"","        dynamodb = boto3.resource('dynamodb', region_name='us-east-1')","        table = dynamodb.Table('orders')  # Your DynamoDB table name","","        # Use product_id as the partition key","        response = table.put_item(","            Item={","                'product_id': self.product_id,  # This is your partition key","                'user': self.user,","                'product_name': self.product_name,","                'quantity': self.quantity,","                'total_price': self.total_price,","                'order_date': self.order_date","            }","        )","        return response","    "],"id":642},{"start":{"row":23,"column":4},"end":{"row":45,"column":0},"action":"insert","lines":["    def save(self):","        \"\"\"","        Save the order to DynamoDB.","        \"\"\"","        try:","            # Save the order to DynamoDB","            response = self.table.put_item(","                Item={","                    'product_id': self.product_id,  # Partition key","                    'user': self.user,","                    'product_name': self.product_name,","                    'quantity': self.quantity,","                    'total_price': self.total_price,","                    'order_date': self.order_date","                }","            )","            print(f\"Order saved to DynamoDB: {response}\")","            return response","        except Exception as e:","            print(f\"Error saving order to DynamoDB: {e}\")","            return None","",""]}],[{"start":{"row":23,"column":4},"end":{"row":23,"column":8},"action":"remove","lines":["    "],"id":643}],[{"start":{"row":46,"column":4},"end":{"row":60,"column":4},"action":"remove","lines":["def get_order(self):","        \"\"\"","        Fetch the order details from DynamoDB using the product_id (partition key).","        \"\"\"","        try:","            # Fetch order from DynamoDB using product_id as the partition key","            response = self.table.get_item(","                Key={'product_id': self.product_id}","            )","            return response.get('Item', None)  # If not found, return None","        except Exception as e:","            print(f\"Error fetching order from DynamoDB: {e}\")","            return None","","    "],"id":644},{"start":{"row":46,"column":4},"end":{"row":58,"column":23},"action":"insert","lines":["","    def get_order(self):","        \"\"\"","        Fetch the order details from DynamoDB using the product_id (partition key).","        \"\"\"","        try:","            response = self.table.get_item(","                Key={'product_id': str(self.product_id)}  # Using product_id as partition key","            )","            return response.get('Item', None)  # If order not found, return None","        except Exception as e:","            print(f\"Error fetching order from DynamoDB: {e}\")","            return None"]}],[{"start":{"row":7,"column":0},"end":{"row":21,"column":0},"action":"remove","lines":["class DynamoOrder:","    def __init__(self, order):","        \"\"\"","        Initialize DynamoOrder with attributes from the Django Order model.","        \"\"\"","        # Initialize DynamoDB resource and table","        self.dynamodb = boto3.resource('dynamodb', region_name='us-east-1')","        self.table = self.dynamodb.Table('orders')  # DynamoDB table name","        self.product_id = str(order.id)  # Use the order's id or any unique identifier","        self.user = str(order.user.id)  # Assuming `user` is a ForeignKey to User","        self.product_name = order.product_name  # Replace with actual field names","        self.quantity = order.quantity","        self.total_price = str(order.total_price)  # Convert decimal to string for DynamoDB","        self.order_date = str(order.order_date)",""],"id":645},{"start":{"row":7,"column":0},"end":{"row":15,"column":0},"action":"insert","lines":["class DynamoOrder:","    def __init__(self, product_id, user, total_price, order_date):","        self.dynamodb = boto3.resource('dynamodb', region_name='us-east-1')","        self.table = self.dynamodb.Table('orders')  # Your DynamoDB table","        self.product_id = product_id  # Partition key","        self.user = user","        self.total_price = total_price","        self.order_date = order_date",""]}],[{"start":{"row":7,"column":0},"end":{"row":15,"column":0},"action":"remove","lines":["class DynamoOrder:","    def __init__(self, product_id, user, total_price, order_date):","        self.dynamodb = boto3.resource('dynamodb', region_name='us-east-1')","        self.table = self.dynamodb.Table('orders')  # Your DynamoDB table","        self.product_id = product_id  # Partition key","        self.user = user","        self.total_price = total_price","        self.order_date = order_date",""],"id":646},{"start":{"row":7,"column":0},"end":{"row":14,"column":0},"action":"insert","lines":["class DynamoOrder:","    def __init__(self, product_id, user, total_price, order_date):","        self.product_id = product_id","        self.user = user","        self.total_price = total_price","        self.order_date = order_date","        self.table = dynamodb.Table('orders')  # Define your DynamoDB table here",""]}],[{"start":{"row":16,"column":4},"end":{"row":37,"column":0},"action":"remove","lines":["def save(self):","        \"\"\"","        Save the order to DynamoDB.","        \"\"\"","        try:","            # Save the order to DynamoDB","            response = self.table.put_item(","                Item={","                    'product_id': self.product_id,  # Partition key","                    'user': self.user,","                    'product_name': self.product_name,","                    'quantity': self.quantity,","                    'total_price': self.total_price,","                    'order_date': self.order_date","                }","            )","            print(f\"Order saved to DynamoDB: {response}\")","            return response","        except Exception as e:","            print(f\"Error saving order to DynamoDB: {e}\")","            return None",""],"id":647},{"start":{"row":16,"column":4},"end":{"row":32,"column":57},"action":"insert","lines":["","    def save(self):","        \"\"\"","        Save the order data to DynamoDB.","        \"\"\"","        try:","            response = self.table.put_item(","                Item={","                    'product_id': str(self.product_id),","                    'user': str(self.user.id),","                    'total_price': str(self.total_price),  # Convert decimal to string","                    'order_date': str(self.order_date),","                }","            )","            print(f\"Order saved to DynamoDB: {response}\")","        except Exception as e:","            print(f\"Error saving order to DynamoDB: {e}\")"]}],[{"start":{"row":7,"column":0},"end":{"row":46,"column":23},"action":"remove","lines":["class DynamoOrder:","    def __init__(self, product_id, user, total_price, order_date):","        self.product_id = product_id","        self.user = user","        self.total_price = total_price","        self.order_date = order_date","        self.table = dynamodb.Table('orders')  # Define your DynamoDB table here","","    ","    ","    def save(self):","        \"\"\"","        Save the order data to DynamoDB.","        \"\"\"","        try:","            response = self.table.put_item(","                Item={","                    'product_id': str(self.product_id),","                    'user': str(self.user.id),","                    'total_price': str(self.total_price),  # Convert decimal to string","                    'order_date': str(self.order_date),","                }","            )","            print(f\"Order saved to DynamoDB: {response}\")","        except Exception as e:","            print(f\"Error saving order to DynamoDB: {e}\")","","    ","    def get_order(self):","        \"\"\"","        Fetch the order details from DynamoDB using the product_id (partition key).","        \"\"\"","        try:","            response = self.table.get_item(","                Key={'product_id': str(self.product_id)}  # Using product_id as partition key","            )","            return response.get('Item', None)  # If order not found, return None","        except Exception as e:","            print(f\"Error fetching order from DynamoDB: {e}\")","            return None"],"id":648},{"start":{"row":7,"column":0},"end":{"row":43,"column":57},"action":"insert","lines":["class DynamoOrder:","    def __init__(self, product_id, user, total_price, order_date):","        self.product_id = product_id","        self.user = user","        self.total_price = total_price","        self.order_date = order_date","        self.table = dynamodb.Table('orders')  # Define your DynamoDB table here","","    def get_order(self):","        \"\"\"","        Fetch the order details from DynamoDB using the product_id (partition key).","        \"\"\"","        try:","            response = self.table.get_item(","                Key={'product_id': str(self.product_id)}  # Assuming 'product_id' is the partition key","            )","            return response.get('Item', None)  # If not found, return None","        except Exception as e:","            print(f\"Error fetching order from DynamoDB: {e}\")","            return None","","    def save(self):","        \"\"\"","        Save the order data to DynamoDB.","        \"\"\"","        try:","            response = self.table.put_item(","                Item={","                    'product_id': str(self.product_id),","                    'user': str(self.user.id),  # Assuming user is a ForeignKey or has an ID","                    'total_price': str(self.total_price),  # Convert decimal to string","                    'order_date': str(self.order_date),","                }","            )","            print(f\"Order saved to DynamoDB: {response}\")","        except Exception as e:","            print(f\"Error saving order to DynamoDB: {e}\")"]}],[{"start":{"row":7,"column":0},"end":{"row":43,"column":57},"action":"remove","lines":["class DynamoOrder:","    def __init__(self, product_id, user, total_price, order_date):","        self.product_id = product_id","        self.user = user","        self.total_price = total_price","        self.order_date = order_date","        self.table = dynamodb.Table('orders')  # Define your DynamoDB table here","","    def get_order(self):","        \"\"\"","        Fetch the order details from DynamoDB using the product_id (partition key).","        \"\"\"","        try:","            response = self.table.get_item(","                Key={'product_id': str(self.product_id)}  # Assuming 'product_id' is the partition key","            )","            return response.get('Item', None)  # If not found, return None","        except Exception as e:","            print(f\"Error fetching order from DynamoDB: {e}\")","            return None","","    def save(self):","        \"\"\"","        Save the order data to DynamoDB.","        \"\"\"","        try:","            response = self.table.put_item(","                Item={","                    'product_id': str(self.product_id),","                    'user': str(self.user.id),  # Assuming user is a ForeignKey or has an ID","                    'total_price': str(self.total_price),  # Convert decimal to string","                    'order_date': str(self.order_date),","                }","            )","            print(f\"Order saved to DynamoDB: {response}\")","        except Exception as e:","            print(f\"Error saving order to DynamoDB: {e}\")"],"id":649},{"start":{"row":7,"column":0},"end":{"row":43,"column":57},"action":"insert","lines":["class DynamoOrder:","    def __init__(self, product_id, user, total_price, order_date):","        self.product_id = product_id","        self.user = user","        self.total_price = total_price","        self.order_date = order_date","        self.table = dynamodb.Table('orders')  # Set the DynamoDB table name","","    def get_order(self):","        \"\"\"","        Fetch the order details from DynamoDB using the product_id (partition key).","        \"\"\"","        try:","            response = self.table.get_item(","                Key={'product_id': str(self.product_id)}  # Assuming 'product_id' is the partition key","            )","            return response.get('Item', None)  # If not found, return None","        except Exception as e:","            print(f\"Error fetching order from DynamoDB: {e}\")","            return None","","    def save(self):","        \"\"\"","        Save the order data to DynamoDB.","        \"\"\"","        try:","            response = self.table.put_item(","                Item={","                    'product_id': str(self.product_id),  # DynamoDB key is always a string","                    'user': str(self.user.id),  # Assuming user is a ForeignKey or has an ID","                    'total_price': str(self.total_price),  # Convert decimal to string","                    'order_date': str(self.order_date),","                }","            )","            print(f\"Order saved to DynamoDB: {response}\")","        except Exception as e:","            print(f\"Error saving order to DynamoDB: {e}\")"]}],[{"start":{"row":1,"column":32},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":650}],[{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["from datetime import datetime",""],"id":651}],[{"start":{"row":9,"column":0},"end":{"row":45,"column":57},"action":"remove","lines":["class DynamoOrder:","    def __init__(self, product_id, user, total_price, order_date):","        self.product_id = product_id","        self.user = user","        self.total_price = total_price","        self.order_date = order_date","        self.table = dynamodb.Table('orders')  # Set the DynamoDB table name","","    def get_order(self):","        \"\"\"","        Fetch the order details from DynamoDB using the product_id (partition key).","        \"\"\"","        try:","            response = self.table.get_item(","                Key={'product_id': str(self.product_id)}  # Assuming 'product_id' is the partition key","            )","            return response.get('Item', None)  # If not found, return None","        except Exception as e:","            print(f\"Error fetching order from DynamoDB: {e}\")","            return None","","    def save(self):","        \"\"\"","        Save the order data to DynamoDB.","        \"\"\"","        try:","            response = self.table.put_item(","                Item={","                    'product_id': str(self.product_id),  # DynamoDB key is always a string","                    'user': str(self.user.id),  # Assuming user is a ForeignKey or has an ID","                    'total_price': str(self.total_price),  # Convert decimal to string","                    'order_date': str(self.order_date),","                }","            )","            print(f\"Order saved to DynamoDB: {response}\")","        except Exception as e:","            print(f\"Error saving order to DynamoDB: {e}\")"],"id":652},{"start":{"row":9,"column":0},"end":{"row":45,"column":23},"action":"insert","lines":["class DynamoOrder:","    def __init__(self, product_id=None, user=None, total_price=None, order_date=None):","        self.product_id = product_id","        self.user = user","        self.total_price = total_price","        self.order_date = order_date","        self.table = dynamodb.Table('orders')  # Make sure 'orders' is your DynamoDB table name","","    def save(self):","        \"\"\"","        Save the order to DynamoDB.","        \"\"\"","        try:","            response = self.table.put_item(","                Item={","                    'product_id': self.product_id,  # Partition key","                    'user': self.user,  # User who placed the order","                    'total_price': self.total_price,  # Total price of the order","                    'order_date': str(self.order_date),  # Order date (string format)","                }","            )","            print(f\"Order saved to DynamoDB: {response}\")","        except Exception as e:","            print(f\"Error saving order to DynamoDB: {e}\")","","    def get_order(self):","        \"\"\"","        Fetch the order details from DynamoDB using the product_id (partition key).","        \"\"\"","        try:","            response = self.table.get_item(","                Key={'product_id': str(self.product_id)}  # Fetch using product_id as the partition key","            )","            return response.get('Item', None)  # If not found, return None","        except Exception as e:","            print(f\"Error fetching order from DynamoDB: {e}\")","            return None"]}],[{"start":{"row":14,"column":36},"end":{"row":15,"column":0},"action":"insert","lines":["",""],"id":653},{"start":{"row":15,"column":0},"end":{"row":15,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":15,"column":8},"end":{"row":15,"column":109},"action":"insert","lines":[" self.dynamodb = boto3.resource('dynamodb', region_name='us-east-1')  # Update the region accordingly"],"id":654}],[{"start":{"row":15,"column":8},"end":{"row":15,"column":9},"action":"remove","lines":[" "],"id":655}],[{"start":{"row":18,"column":3},"end":{"row":33,"column":57},"action":"remove","lines":[" def save(self):","        \"\"\"","        Save the order to DynamoDB.","        \"\"\"","        try:","            response = self.table.put_item(","                Item={","                    'product_id': self.product_id,  # Partition key","                    'user': self.user,  # User who placed the order","                    'total_price': self.total_price,  # Total price of the order","                    'order_date': str(self.order_date),  # Order date (string format)","                }","            )","            print(f\"Order saved to DynamoDB: {response}\")","        except Exception as e:","            print(f\"Error saving order to DynamoDB: {e}\")"],"id":656},{"start":{"row":18,"column":3},"end":{"row":32,"column":23},"action":"insert","lines":["  def save(self):","        try:","            response = self.table.put_item(","                Item={","                    'product_id': str(self.product_id),  # Save product_id as string (partition key)","                    'user': str(self.user),              # Save user ID as string","                    'total_price': str(self.total_price),  # Save price as string","                    'order_date': str(self.order_date),   # Save the order date as string","                }","            )","            print(f\"Order saved to DynamoDB: {response}\")  # Prints response from DynamoDB to debug","            return response","        except Exception as e:","            print(f\"Error saving order to DynamoDB: {e}\")","            return None"]}],[{"start":{"row":18,"column":4},"end":{"row":18,"column":5},"action":"remove","lines":[" "],"id":657}],[{"start":{"row":16,"column":8},"end":{"row":16,"column":46},"action":"remove","lines":["self.table = dynamodb.Table('orders') "],"id":658},{"start":{"row":16,"column":8},"end":{"row":16,"column":116},"action":"insert","lines":[" self.table = boto3.resource('dynamodb', region_name=settings.AWS_REGION).Table(settings.AWS_DYNAMODB_TABLE)"]}],[{"start":{"row":16,"column":8},"end":{"row":16,"column":9},"action":"remove","lines":[" "],"id":659}],[{"start":{"row":32,"column":12},"end":{"row":32,"column":23},"action":"remove","lines":["return None"],"id":660}],[{"start":{"row":10,"column":37},"end":{"row":10,"column":38},"action":"remove","lines":["e"],"id":661},{"start":{"row":10,"column":36},"end":{"row":10,"column":37},"action":"remove","lines":["n"]},{"start":{"row":10,"column":35},"end":{"row":10,"column":36},"action":"remove","lines":["o"]},{"start":{"row":10,"column":34},"end":{"row":10,"column":35},"action":"remove","lines":["N"]},{"start":{"row":10,"column":33},"end":{"row":10,"column":34},"action":"remove","lines":["="]}],[{"start":{"row":18,"column":3},"end":{"row":32,"column":12},"action":"remove","lines":[" def save(self):","        try:","            response = self.table.put_item(","                Item={","                    'product_id': str(self.product_id),  # Save product_id as string (partition key)","                    'user': str(self.user),              # Save user ID as string","                    'total_price': str(self.total_price),  # Save price as string","                    'order_date': str(self.order_date),   # Save the order date as string","                }","            )","            print(f\"Order saved to DynamoDB: {response}\")  # Prints response from DynamoDB to debug","            return response","        except Exception as e:","            print(f\"Error saving order to DynamoDB: {e}\")","            "],"id":662},{"start":{"row":18,"column":3},"end":{"row":31,"column":57},"action":"insert","lines":[" def save(self):","        try:","            # Put item into DynamoDB","            response = self.table.put_item(","                Item={","                    'product_id': self.product_id,","                    'user': self.user,","                    'total_price': self.total_price,","                    'order_date': self.order_date","                }","            )","            print(f\"Order saved to DynamoDB: {response}\")","        except Exception as e:","            print(f\"Error saving order to DynamoDB: {e}\")"]}],[{"start":{"row":21,"column":26},"end":{"row":21,"column":27},"action":"remove","lines":["f"],"id":663},{"start":{"row":21,"column":25},"end":{"row":21,"column":26},"action":"remove","lines":["l"]},{"start":{"row":21,"column":24},"end":{"row":21,"column":25},"action":"remove","lines":["e"]},{"start":{"row":21,"column":23},"end":{"row":21,"column":24},"action":"remove","lines":["s"]}],[{"start":{"row":21,"column":23},"end":{"row":21,"column":24},"action":"remove","lines":["."],"id":664}],[{"start":{"row":23,"column":20},"end":{"row":26,"column":49},"action":"remove","lines":["'product_id': self.product_id,","                    'user': self.user,","                    'total_price': self.total_price,","                    'order_date': self.order_date"],"id":665},{"start":{"row":23,"column":20},"end":{"row":26,"column":81},"action":"insert","lines":["'product_id': str(self.product_id),  # Convert product_id to string","                    'user': str(self.user),  # Ensure user is a string","                    'total_price': str(self.total_price),  # Convert to string","                    'order_date': str(self.order_date),  # Convert date to string"]}],[{"start":{"row":44,"column":23},"end":{"row":45,"column":0},"action":"insert","lines":["",""],"id":667},{"start":{"row":45,"column":0},"end":{"row":45,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":45,"column":8},"end":{"row":45,"column":12},"action":"remove","lines":["    "],"id":668},{"start":{"row":45,"column":4},"end":{"row":45,"column":8},"action":"remove","lines":["    "]}],[{"start":{"row":45,"column":4},"end":{"row":55,"column":19},"action":"insert","lines":["def get_order_from_dynamodb(order_id):","    try:","        response = table.get_item(","            Key={","                'product_id': str(order_id),  # Use product_id as the partition key","            }","        )","        return response.get('Item', None)  # Return the item or None if not found","    except Exception as e:","        print(f\"Error fetching order from DynamoDB: {e}\")","        return None"],"id":669}],[{"start":{"row":45,"column":4},"end":{"row":55,"column":19},"action":"remove","lines":["def get_order_from_dynamodb(order_id):","    try:","        response = table.get_item(","            Key={","                'product_id': str(order_id),  # Use product_id as the partition key","            }","        )","        return response.get('Item', None)  # Return the item or None if not found","    except Exception as e:","        print(f\"Error fetching order from DynamoDB: {e}\")","        return None"],"id":670}],[{"start":{"row":45,"column":4},"end":{"row":55,"column":19},"action":"insert","lines":["def get_order_from_dynamodb(order_id):","    try:","        response = table.get_item(","            Key={","                'product_id': str(order_id),  # Use product_id as the partition key","            }","        )","        return response.get('Item', None)  # Return the item or None if not found","    except Exception as e:","        print(f\"Error fetching order from DynamoDB: {e}\")","        return None"],"id":671}],[{"start":{"row":46,"column":4},"end":{"row":55,"column":19},"action":"remove","lines":["try:","        response = table.get_item(","            Key={","                'product_id': str(order_id),  # Use product_id as the partition key","            }","        )","        return response.get('Item', None)  # Return the item or None if not found","    except Exception as e:","        print(f\"Error fetching order from DynamoDB: {e}\")","        return None"],"id":672}],[{"start":{"row":46,"column":4},"end":{"row":46,"column":5},"action":"insert","lines":[" "],"id":673},{"start":{"row":46,"column":5},"end":{"row":46,"column":6},"action":"insert","lines":[" "]},{"start":{"row":46,"column":6},"end":{"row":46,"column":7},"action":"insert","lines":[" "]},{"start":{"row":46,"column":7},"end":{"row":46,"column":8},"action":"insert","lines":[" "]}],[{"start":{"row":46,"column":8},"end":{"row":55,"column":19},"action":"insert","lines":["try:","        response = table.get_item(","            Key={","                'product_id': str(order_id),  # Use product_id as the partition key","            }","        )","        return response.get('Item', None)  # Return the item or None if not found","    except Exception as e:","        print(f\"Error fetching order from DynamoDB: {e}\")","        return None"],"id":674}],[{"start":{"row":47,"column":8},"end":{"row":51,"column":9},"action":"remove","lines":["response = table.get_item(","            Key={","                'product_id': str(order_id),  # Use product_id as the partition key","            }","        )"],"id":675}],[{"start":{"row":46,"column":12},"end":{"row":47,"column":0},"action":"insert","lines":["",""],"id":676},{"start":{"row":47,"column":0},"end":{"row":47,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":47,"column":12},"end":{"row":51,"column":9},"action":"insert","lines":["response = table.get_item(","            Key={","                'product_id': str(order_id),  # Use product_id as the partition key","            }","        )"],"id":677}],[{"start":{"row":53,"column":7},"end":{"row":56,"column":19},"action":"remove","lines":[" return response.get('Item', None)  # Return the item or None if not found","    except Exception as e:","        print(f\"Error fetching order from DynamoDB: {e}\")","        return None"],"id":678}],[{"start":{"row":51,"column":9},"end":{"row":52,"column":0},"action":"insert","lines":["",""],"id":679},{"start":{"row":52,"column":0},"end":{"row":52,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":52,"column":8},"end":{"row":55,"column":19},"action":"insert","lines":["return response.get('Item', None)  # Return the item or None if not found","    except Exception as e:","        print(f\"Error fetching order from DynamoDB: {e}\")","        return None"],"id":680}],[{"start":{"row":53,"column":4},"end":{"row":53,"column":5},"action":"insert","lines":[" "],"id":681},{"start":{"row":53,"column":5},"end":{"row":53,"column":6},"action":"insert","lines":[" "]},{"start":{"row":53,"column":6},"end":{"row":53,"column":7},"action":"insert","lines":[" "]},{"start":{"row":53,"column":7},"end":{"row":53,"column":8},"action":"insert","lines":[" "]}],[{"start":{"row":53,"column":8},"end":{"row":56,"column":8},"action":"remove","lines":["except Exception as e:","        print(f\"Error fetching order from DynamoDB: {e}\")","        return None","        "],"id":682},{"start":{"row":53,"column":8},"end":{"row":55,"column":19},"action":"insert","lines":["except Exception as e:","        print(f\"Error fetching order from DynamoDB: {e}\")","        return None"]}],[{"start":{"row":54,"column":8},"end":{"row":54,"column":9},"action":"insert","lines":[" "],"id":683},{"start":{"row":54,"column":9},"end":{"row":54,"column":10},"action":"insert","lines":[" "]},{"start":{"row":54,"column":10},"end":{"row":54,"column":11},"action":"insert","lines":[" "]}],[{"start":{"row":55,"column":8},"end":{"row":55,"column":9},"action":"insert","lines":[" "],"id":684},{"start":{"row":55,"column":9},"end":{"row":55,"column":10},"action":"insert","lines":[" "]},{"start":{"row":55,"column":10},"end":{"row":55,"column":11},"action":"insert","lines":[" "]}],[{"start":{"row":52,"column":8},"end":{"row":52,"column":9},"action":"insert","lines":[" "],"id":685},{"start":{"row":52,"column":9},"end":{"row":52,"column":10},"action":"insert","lines":[" "]}],[{"start":{"row":52,"column":9},"end":{"row":52,"column":10},"action":"remove","lines":[" "],"id":686}],[{"start":{"row":52,"column":8},"end":{"row":52,"column":9},"action":"remove","lines":[" "],"id":687}],[{"start":{"row":52,"column":8},"end":{"row":52,"column":9},"action":"insert","lines":[" "],"id":688},{"start":{"row":52,"column":9},"end":{"row":52,"column":10},"action":"insert","lines":[" "]},{"start":{"row":52,"column":10},"end":{"row":52,"column":11},"action":"insert","lines":[" "]},{"start":{"row":52,"column":11},"end":{"row":52,"column":12},"action":"insert","lines":[" "]},{"start":{"row":52,"column":12},"end":{"row":52,"column":13},"action":"insert","lines":[" "]},{"start":{"row":52,"column":13},"end":{"row":52,"column":14},"action":"insert","lines":[" "]},{"start":{"row":52,"column":14},"end":{"row":52,"column":15},"action":"insert","lines":[" "]}],[{"start":{"row":51,"column":8},"end":{"row":51,"column":9},"action":"insert","lines":[" "],"id":689},{"start":{"row":51,"column":9},"end":{"row":51,"column":10},"action":"insert","lines":[" "]},{"start":{"row":51,"column":10},"end":{"row":51,"column":11},"action":"insert","lines":[" "]},{"start":{"row":51,"column":11},"end":{"row":51,"column":12},"action":"insert","lines":[" "]}],[{"start":{"row":51,"column":8},"end":{"row":51,"column":12},"action":"remove","lines":["    "],"id":690}],[{"start":{"row":51,"column":8},"end":{"row":51,"column":9},"action":"insert","lines":[" "],"id":691},{"start":{"row":51,"column":9},"end":{"row":51,"column":10},"action":"insert","lines":[" "]}],[{"start":{"row":52,"column":14},"end":{"row":52,"column":15},"action":"remove","lines":[" "],"id":692},{"start":{"row":52,"column":13},"end":{"row":52,"column":14},"action":"remove","lines":[" "]},{"start":{"row":52,"column":12},"end":{"row":52,"column":13},"action":"remove","lines":[" "]},{"start":{"row":52,"column":8},"end":{"row":52,"column":12},"action":"remove","lines":["    "]}],[{"start":{"row":52,"column":8},"end":{"row":52,"column":9},"action":"insert","lines":[" "],"id":693},{"start":{"row":52,"column":9},"end":{"row":52,"column":10},"action":"insert","lines":[" "]}],[{"start":{"row":52,"column":10},"end":{"row":52,"column":11},"action":"insert","lines":[" "],"id":694},{"start":{"row":52,"column":11},"end":{"row":52,"column":12},"action":"insert","lines":[" "]},{"start":{"row":52,"column":12},"end":{"row":52,"column":13},"action":"insert","lines":[" "]}],[{"start":{"row":52,"column":12},"end":{"row":52,"column":13},"action":"remove","lines":[" "],"id":695}],[{"start":{"row":45,"column":32},"end":{"row":45,"column":33},"action":"insert","lines":["s"],"id":696},{"start":{"row":45,"column":33},"end":{"row":45,"column":34},"action":"insert","lines":["e"]},{"start":{"row":45,"column":34},"end":{"row":45,"column":35},"action":"insert","lines":["l"]},{"start":{"row":45,"column":35},"end":{"row":45,"column":36},"action":"insert","lines":["f"]},{"start":{"row":45,"column":36},"end":{"row":45,"column":37},"action":"insert","lines":["m"]}],[{"start":{"row":45,"column":36},"end":{"row":45,"column":37},"action":"remove","lines":["m"],"id":697}],[{"start":{"row":45,"column":36},"end":{"row":45,"column":37},"action":"insert","lines":[","],"id":698}]]},"ace":{"folds":[],"scrolltop":622.0000000000002,"scrollleft":0,"selection":{"start":{"row":50,"column":13},"end":{"row":50,"column":13},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":279,"mode":"ace/mode/python"}},"timestamp":1731715758968,"hash":"8e09a6e914b38a8a60f3def84a997e6fa4a4a6d2"}